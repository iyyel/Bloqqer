// <auto-generated />
using System;
using Bloqqer.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bloqqer.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722202203_MigrationV1")]
    partial class MigrationV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Bloqqer.ApplicationUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7696412e-0a44-4030-8457-57dd583f6764",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 861, DateTimeKind.Utc).AddTicks(9745),
                            Email = "admin@iyyel.io",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "ADMIN@IYYEL.IO",
                            NormalizedUserName = "ADMIN@IYYEL.IO",
                            PasswordHash = "AQAAAAIAAYagAAAAEI25KOjmf+rbFav5CE7Zy/XBUfY/eOyIdVuYl6X6CzodvaUnhCPQ84B3sOLlNpgQqQ==",
                            PhoneNumber = "21212121",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@iyyel.io"
                        },
                        new
                        {
                            Id = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1ae96e3c-5473-49fe-9b88-236ac6c3e8da",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5677),
                            Email = "mail@iyyel.io",
                            EmailConfirmed = true,
                            FirstName = "Daniel",
                            LastName = "",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "MAIL@IYYEL.IO",
                            NormalizedUserName = "MAIL@IYYEL.IO",
                            PasswordHash = "AQAAAAIAAYagAAAAEPKAQanzU+lpbrCbXk6QyKZCVyudWQ/EZNtNuEJLxpaa/Ykje8HgG1ya937vnJBICQ==",
                            PhoneNumber = "20202020",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "user",
                            TwoFactorEnabled = false,
                            UserName = "mail@iyyel.io"
                        },
                        new
                        {
                            Id = new Guid("5734941b-03c9-4416-9451-b32d2a0e4cc0"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "14c160cc-d6a5-4b32-8f71-414cbb151dae",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8681),
                            Email = "james@butler.xyz",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Butler",
                            LockoutEnabled = false,
                            MiddleName = "Henrich",
                            NormalizedEmail = "JAMES@BUTLER.XYZ",
                            NormalizedUserName = "JAMES@BUTLER.XYZ",
                            PasswordHash = "AQAAAAIAAYagAAAAEIVFkCAoob+7qjmbyRSOQ3hHPVQkxZm6A26wdUdSlNjsLf04mDD3LotqB6IX3RHa0Q==",
                            PhoneNumber = "23232323",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "james",
                            TwoFactorEnabled = false,
                            UserName = "james@butler.xyz"
                        });
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Bloq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Bloqqer.Bloqs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("295efc76-56d6-4839-ada4-25924f912aa0"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5118),
                            Description = "Admin Seed Bloq Description 1/2",
                            IsPrivate = false,
                            IsPublished = true,
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5112),
                            Title = "Admin Seed Bloq Title 1/2"
                        },
                        new
                        {
                            Id = new Guid("f8d31b28-1c9a-43c0-aebd-19236af4422f"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5131),
                            Description = "Admin Seed Bloq Description 2/2",
                            IsPrivate = true,
                            IsPublished = false,
                            Title = "Admin Seed Bloq Title 2/2"
                        },
                        new
                        {
                            Id = new Guid("dc5b12fd-f5a3-4a04-a6e0-c4cd552cd6b5"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8175),
                            Description = "Daniel Seed Bloq Description",
                            IsPrivate = false,
                            IsPublished = true,
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8169),
                            Title = "Daniel Seed Bloq Title"
                        });
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Bloqqer.Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1af0038f-73a2-4fbb-867f-75a90cf33536"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            Content = "Admin Seed Bloq Post 1 Comment 1/2",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5146),
                            IsPublished = true,
                            PostId = new Guid("0cb3379f-6bea-424d-ba0f-a44f4fa6a11a"),
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5146)
                        },
                        new
                        {
                            Id = new Guid("180daba0-d465-40d0-bb01-68e0ac40b86c"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            Content = "Admin Seed Bloq Post 1 Comment 2/2",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5148),
                            IsPublished = false,
                            PostId = new Guid("0cb3379f-6bea-424d-ba0f-a44f4fa6a11a")
                        },
                        new
                        {
                            Id = new Guid("3e8f006d-04c7-4d2b-97a2-108de9b39b3a"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            Content = "Admin Seed Bloq Post 2 Comment 1/2",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5149),
                            IsPublished = true,
                            PostId = new Guid("efab75ca-f1ac-4211-8076-e344b9c98025"),
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5149)
                        },
                        new
                        {
                            Id = new Guid("fcc41c42-f406-4b28-9b4f-c7e02ccb6380"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            Content = "Admin Seed Bloq Post 2 Comment 2/2",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5150),
                            IsPublished = false,
                            PostId = new Guid("efab75ca-f1ac-4211-8076-e344b9c98025")
                        },
                        new
                        {
                            Id = new Guid("d1cd67d2-67e5-4c6f-aabb-cb4056dd5064"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            Content = "Daniel Seed Bloq Post 1 Comment 1/3",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8208),
                            IsPublished = true,
                            PostId = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8207)
                        },
                        new
                        {
                            Id = new Guid("49304138-ec9e-495e-8774-d4b2b64781ce"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            Content = "Daniel Seed Bloq Post 1 Comment 2/3",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8210),
                            IsPublished = true,
                            PostId = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8210)
                        },
                        new
                        {
                            Id = new Guid("679dee46-f2f2-4859-bedc-7d542eae5089"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            Content = "Daniel Seed Bloq Post 1 Comment 3/3",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8212),
                            IsPublished = true,
                            PostId = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8212)
                        });
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloqId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BloqId");

                    b.ToTable("Bloqqer.Posts", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cb3379f-6bea-424d-ba0f-a44f4fa6a11a"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            BloqId = new Guid("295efc76-56d6-4839-ada4-25924f912aa0"),
                            Content = "Admin Seed Bloq Post 1/2 Content",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5138),
                            Description = "Admin Seed Bloq Post 1/2 Description",
                            IsPublished = true,
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5138),
                            Title = "Admin Seed Bloq Post 1/2"
                        },
                        new
                        {
                            Id = new Guid("efab75ca-f1ac-4211-8076-e344b9c98025"),
                            AuthorId = new Guid("c108f0d4-7f9f-49eb-8a18-9f9bd81e1765"),
                            BloqId = new Guid("295efc76-56d6-4839-ada4-25924f912aa0"),
                            Content = "Admin Seed Bloq Post 2/2 Content",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 904, DateTimeKind.Utc).AddTicks(5141),
                            Description = "Admin Seed Bloq Post 2/2 Description",
                            IsPublished = false,
                            Title = "Admin Seed Bloq Post 2/2"
                        },
                        new
                        {
                            Id = new Guid("0afda5fc-0a56-45b6-a983-3018048c204a"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            BloqId = new Guid("dc5b12fd-f5a3-4a04-a6e0-c4cd552cd6b5"),
                            Content = "Daniel Seed Bloq Post 1/2 Content",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8195),
                            Description = "Daniel Seed Bloq Post 1/2 Description",
                            IsPublished = true,
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8194),
                            Title = "Daniel Seed Bloq Post 1/2"
                        },
                        new
                        {
                            Id = new Guid("f298d1f6-9ae6-477c-af37-173f959cdd1c"),
                            AuthorId = new Guid("de05b775-a344-497f-a091-643d267ff25d"),
                            BloqId = new Guid("dc5b12fd-f5a3-4a04-a6e0-c4cd552cd6b5"),
                            Content = "Daniel Seed Bloq Post 2/2 Content",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8199),
                            Description = "Daniel Seed Bloq Post 2/2 Description",
                            IsPublished = true,
                            Published = new DateTime(2024, 7, 22, 20, 22, 2, 944, DateTimeKind.Utc).AddTicks(8198),
                            Title = "Daniel Seed Bloq Post 2/2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Bloq", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", "Author")
                        .WithMany("Bloqs")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Comment", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bloqqer.Infrastructure.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("Author");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Post", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bloqqer.Infrastructure.Models.Bloq", "Bloq")
                        .WithMany("Posts")
                        .HasForeignKey("BloqId");

                    b.Navigation("Author");

                    b.Navigation("Bloq");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bloqs");

                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Bloq", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
