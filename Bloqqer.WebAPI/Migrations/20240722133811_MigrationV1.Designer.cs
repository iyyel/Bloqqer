// <auto-generated />
using System;
using Bloqqer.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bloqqer.WebAPI.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240722133811_MigrationV1")]
    partial class MigrationV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("LastName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cbeca2b2-01d7-4014-aea3-f7c8a809a905"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "62793c88-5f85-4785-8f4a-33ac29b8742d",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 15, 38, 11, 540, DateTimeKind.Local).AddTicks(8391),
                            Email = "admin@iyyel.io",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            LastName = "",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "ADMIN@IYYEL.IO",
                            NormalizedUserName = "ADMIN@IYYEL.IO",
                            PasswordHash = "AQAAAAIAAYagAAAAEIUl3P0FncNsdrY9J9YE+pzXHoET6n/QQuUwZ5Ih42ij4FNt44FdqyAcDxDhUz7jqQ==",
                            PhoneNumber = "21212121",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "admin",
                            TwoFactorEnabled = false,
                            UserName = "admin@iyyel.io"
                        },
                        new
                        {
                            Id = new Guid("9ec5bf5a-8215-453b-ae4c-55ea4b337823"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "294eee7c-5098-42e3-895d-9e006237ed31",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 15, 38, 11, 578, DateTimeKind.Local).AddTicks(241),
                            Email = "mail@iyyel.io",
                            EmailConfirmed = true,
                            FirstName = "Daniel",
                            LastName = "Larsen",
                            LockoutEnabled = false,
                            MiddleName = "",
                            NormalizedEmail = "MAIL@IYYEL.IO",
                            NormalizedUserName = "MAIL@IYYEL.IO",
                            PasswordHash = "AQAAAAIAAYagAAAAEAcGagwcG9QQTXna8CF+ZzcYG1SkHpoGdH/6ZE1vbX9GRK7QebTii2X536VcfjTcEg==",
                            PhoneNumber = "20202020",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "user",
                            TwoFactorEnabled = false,
                            UserName = "mail@iyyel.io"
                        });
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Bloq", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("Bloqs");

                    b.HasData(
                        new
                        {
                            Id = new Guid("954c3a03-9992-452a-8c22-f306d7ecbfcd"),
                            ApplicationUserId = new Guid("cbeca2b2-01d7-4014-aea3-f7c8a809a905"),
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 577, DateTimeKind.Utc).AddTicks(9686),
                            Description = "Admin Seed Bloq Description",
                            IsPrivate = false,
                            IsPublished = false,
                            Title = "Admin Seed Bloq Title"
                        },
                        new
                        {
                            Id = new Guid("db2f6fa6-664e-4381-880b-88a7b0563440"),
                            ApplicationUserId = new Guid("9ec5bf5a-8215-453b-ae4c-55ea4b337823"),
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 615, DateTimeKind.Utc).AddTicks(3936),
                            Description = "Daniel Seed Bloq Description",
                            IsPrivate = false,
                            IsPublished = false,
                            Title = "Daniel Seed Bloq Title"
                        });
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("PostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5458a84b-0762-4550-a6af-0e2e518c1d53"),
                            ApplicationUserId = new Guid("cbeca2b2-01d7-4014-aea3-f7c8a809a905"),
                            Content = "Admin Seed Bloq Post 1 Comment 1/2",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 577, DateTimeKind.Utc).AddTicks(9704),
                            IsPublished = true,
                            PostId = new Guid("22ec441d-2c36-4979-a85e-9d686e9606ec")
                        },
                        new
                        {
                            Id = new Guid("15b8e778-83a3-435f-a177-752d507c30c9"),
                            ApplicationUserId = new Guid("cbeca2b2-01d7-4014-aea3-f7c8a809a905"),
                            Content = "Admin Seed Bloq Post 1 Comment 2/2",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 577, DateTimeKind.Utc).AddTicks(9706),
                            IsPublished = true,
                            PostId = new Guid("22ec441d-2c36-4979-a85e-9d686e9606ec")
                        },
                        new
                        {
                            Id = new Guid("d36369b7-8bf8-4e2e-b7ca-9ff650cc852f"),
                            ApplicationUserId = new Guid("cbeca2b2-01d7-4014-aea3-f7c8a809a905"),
                            Content = "Admin Seed Bloq Post 2 Comment 1/1",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 577, DateTimeKind.Utc).AddTicks(9707),
                            IsPublished = true,
                            PostId = new Guid("1ef5202a-3982-4bd3-9e02-8e544717aa58")
                        },
                        new
                        {
                            Id = new Guid("a1a0fc2a-8c93-4615-9773-a54435932eab"),
                            ApplicationUserId = new Guid("9ec5bf5a-8215-453b-ae4c-55ea4b337823"),
                            Content = "Daniel Seed Bloq Post Comment 1/3",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 615, DateTimeKind.Utc).AddTicks(3956),
                            IsPublished = true,
                            PostId = new Guid("fe39ae01-336c-4938-a9ef-d3ddfdfd0361")
                        },
                        new
                        {
                            Id = new Guid("9834727c-9134-4148-b7b1-8e2a6d3a0bde"),
                            ApplicationUserId = new Guid("9ec5bf5a-8215-453b-ae4c-55ea4b337823"),
                            Content = "Daniel Seed Bloq Post Comment 2/3",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 615, DateTimeKind.Utc).AddTicks(3958),
                            IsPublished = true,
                            PostId = new Guid("fe39ae01-336c-4938-a9ef-d3ddfdfd0361")
                        },
                        new
                        {
                            Id = new Guid("4ed8541c-311d-402a-9286-9e30a12693f8"),
                            ApplicationUserId = new Guid("9ec5bf5a-8215-453b-ae4c-55ea4b337823"),
                            Content = "Daniel Seed Bloq Post Comment 3/3",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 615, DateTimeKind.Utc).AddTicks(3959),
                            IsPublished = true,
                            PostId = new Guid("fe39ae01-336c-4938-a9ef-d3ddfdfd0361")
                        });
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BloqId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Published")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("BloqId");

                    b.ToTable("Posts");

                    b.HasData(
                        new
                        {
                            Id = new Guid("22ec441d-2c36-4979-a85e-9d686e9606ec"),
                            ApplicationUserId = new Guid("cbeca2b2-01d7-4014-aea3-f7c8a809a905"),
                            BloqId = new Guid("954c3a03-9992-452a-8c22-f306d7ecbfcd"),
                            Content = "Admin Seed Bloq Post 1/2 Content",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 577, DateTimeKind.Utc).AddTicks(9698),
                            Description = "Admin Seed Bloq Post 1/2 Description",
                            IsPublished = true,
                            Title = "Admin Seed Bloq Post 1/2"
                        },
                        new
                        {
                            Id = new Guid("1ef5202a-3982-4bd3-9e02-8e544717aa58"),
                            ApplicationUserId = new Guid("cbeca2b2-01d7-4014-aea3-f7c8a809a905"),
                            BloqId = new Guid("954c3a03-9992-452a-8c22-f306d7ecbfcd"),
                            Content = "Admin Seed Bloq Post 2/2 Content",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 577, DateTimeKind.Utc).AddTicks(9700),
                            Description = "Admin Seed Bloq Post 2/2 Description",
                            IsPublished = true,
                            Title = "Admin Seed Bloq Post 2/2"
                        },
                        new
                        {
                            Id = new Guid("fe39ae01-336c-4938-a9ef-d3ddfdfd0361"),
                            ApplicationUserId = new Guid("9ec5bf5a-8215-453b-ae4c-55ea4b337823"),
                            BloqId = new Guid("db2f6fa6-664e-4381-880b-88a7b0563440"),
                            Content = "Daniel Seed Bloq Post 1/1 Content",
                            CreatedBy = "Seed",
                            CreatedOn = new DateTime(2024, 7, 22, 13, 38, 11, 615, DateTimeKind.Utc).AddTicks(3951),
                            Description = "Daniel Seed Bloq Post 1/1 Description",
                            IsPublished = true,
                            Title = "Daniel Seed Bloq Post 1/1"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Bloq", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Bloqs")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Comment", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Comments")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bloqqer.Infrastructure.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Post", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Posts")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bloqqer.Infrastructure.Models.Bloq", "Bloq")
                        .WithMany("Posts")
                        .HasForeignKey("BloqId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("Bloq");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Bloqqer.Infrastructure.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.ApplicationUser", b =>
                {
                    b.Navigation("Bloqs");

                    b.Navigation("Comments");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Bloq", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("Bloqqer.Infrastructure.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
